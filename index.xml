<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mili&#39;s Storys</title>
    <link>https://5imili.github.io/</link>
    <description>Recent content on Mili&#39;s Storys</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>frank@linux.com (555iMili)</managingEditor>
    <webMaster>frank@linux.com (555iMili)</webMaster>
    <lastBuildDate>Tue, 16 Jan 2018 23:20:26 +0800</lastBuildDate>
    
	<atom:link href="https://5imili.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang编程基础</title>
      <link>https://5imili.github.io/posts/golang/basic/readme/</link>
      <pubDate>Tue, 16 Jan 2018 23:20:26 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/posts/golang/basic/readme/</guid>
      <description>词法 类型 表达式 流程控制 数据 函数 方法 接口 包管理 反射 测试 并发</description>
    </item>
    
    <item>
      <title>函数</title>
      <link>https://5imili.github.io/posts/golang/basic/func/</link>
      <pubDate>Tue, 16 Jan 2018 23:20:26 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/posts/golang/basic/func/</guid>
      <description>1. 定义 2. 参数 3. 返回值 4. 匿名函数 5. 延迟调用 6. 错误处理 定义 函数是结构化编程中最小的模块单元，日常开发过程中，将复杂的算法过程分解为若干个小任务，</description>
    </item>
    
    <item>
      <title>包管理</title>
      <link>https://5imili.github.io/posts/golang/basic/package/</link>
      <pubDate>Tue, 16 Jan 2018 23:20:26 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/posts/golang/basic/package/</guid>
      <description>1. 工作空间 2. 导入包 3. 组织结构 4. 依赖管理 工作空间 工作空间(workspace)是一个由src,bin,pkg三个目录组成的目录，通常情况下需要</description>
    </item>
    
    <item>
      <title>反射</title>
      <link>https://5imili.github.io/posts/golang/basic/reflect/</link>
      <pubDate>Tue, 16 Jan 2018 23:20:26 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/posts/golang/basic/reflect/</guid>
      <description>1. 类型 2. 值 3. 方法 4. 性能 类型 Go语言反射(reflect)是在程序时实现能够获取对象类型信息和内存结构的方法。 和C语言数据结构一样，Go对象头</description>
    </item>
    
    <item>
      <title>基本词法</title>
      <link>https://5imili.github.io/posts/golang/basic/grammer/</link>
      <pubDate>Tue, 16 Jan 2018 23:20:26 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/posts/golang/basic/grammer/</guid>
      <description>在编程语言中，词法是代码的构成法则。也就是说，词法规定了我们敲入怎样的字符才能编写出编译器 能够识别的代码，所以要掌握一门语言，那么语言的词法</description>
    </item>
    
    <item>
      <title>并发</title>
      <link>https://5imili.github.io/posts/golang/basic/goroutine/</link>
      <pubDate>Tue, 16 Jan 2018 23:20:26 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/posts/golang/basic/goroutine/</guid>
      <description>并发(Concurrency) VS 并行(Parallelism) 并发: 逻辑上将相互独立的执行过程综合到一起的编程技术,重点在于组合。 并行: 物理</description>
    </item>
    
    <item>
      <title>接口</title>
      <link>https://5imili.github.io/posts/golang/basic/interface/</link>
      <pubDate>Tue, 16 Jan 2018 23:20:26 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/posts/golang/basic/interface/</guid>
      <description>1. 定义 2. 实现机制 3. 类型转换 接口(interface)定义 接口是一组方法的集合，我们通过接口来定义对象的一组行为。在某些动态语言里，接口也被称</description>
    </item>
    
    <item>
      <title>数据</title>
      <link>https://5imili.github.io/posts/golang/basic/data/</link>
      <pubDate>Tue, 16 Jan 2018 23:20:26 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/posts/golang/basic/data/</guid>
      <description>1. 字符串 2. 数组 3. 切片 4. 字典 5. 结构 字符串 Go语言中的字符串是由一组不可变的字节(byte)序列组成，从源码文件中看出其本身是一个复合结构： string.go type</description>
    </item>
    
    <item>
      <title>方法</title>
      <link>https://5imili.github.io/posts/golang/basic/method/</link>
      <pubDate>Tue, 16 Jan 2018 23:20:26 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/posts/golang/basic/method/</guid>
      <description>1. 定义 2. 匿名字段 3. 方法集 4. 表达式 定义 方法是与对象实例绑定的特殊函数，用于维护和展示对象的自身状态。 与函数的区别是方法有前置实例接收参数(re</description>
    </item>
    
    <item>
      <title>流程控制</title>
      <link>https://5imili.github.io/posts/golang/basic/flow/</link>
      <pubDate>Tue, 16 Jan 2018 23:20:26 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/posts/golang/basic/flow/</guid>
      <description>Go语言的流程控制主要分为三大类： 1. 条件判断 2. 循环控制 3. 无条件跳转 条件判断 Go语言的条件判断由if &amp;hellip; else if &amp;hellip; else 语句实现，条件表达式值必须是布尔</description>
    </item>
    
    <item>
      <title>测试</title>
      <link>https://5imili.github.io/posts/golang/basic/utest/</link>
      <pubDate>Tue, 16 Jan 2018 23:20:26 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/posts/golang/basic/utest/</guid>
      <description>1. 单元测试 2. 性能测试 3. 代码覆盖率 4. 性能监控 单元测试 单元测试是开发人员的一项基本工作，Go语言提供的单元测试机制不仅可以测试代码的逻辑算法是否</description>
    </item>
    
    <item>
      <title>类型</title>
      <link>https://5imili.github.io/posts/golang/basic/type/</link>
      <pubDate>Tue, 16 Jan 2018 23:20:26 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/posts/golang/basic/type/</guid>
      <description>1. 变量 2. 命名 3. 常量 4. 基本类型 5. 引用类型 6. 类型转换 7. 自定义类型 变量 Go语言有两种方式定义变量： var 关键字 := 短变量声明符 var关键字 var x int //自动</description>
    </item>
    
    <item>
      <title>表达式</title>
      <link>https://5imili.github.io/posts/golang/basic/express/</link>
      <pubDate>Tue, 16 Jan 2018 23:20:26 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/posts/golang/basic/express/</guid>
      <description>1. 关键字 2. 运算符 3. 初始化 关键字 关键字是指被编程语言保留而不让编程人员作为标志符使用的字符序列。因此，关键字也称为保留字， 每种编程语言都有自己</description>
    </item>
    
    <item>
      <title>Golang</title>
      <link>https://5imili.github.io/posts/golang/</link>
      <pubDate>Tue, 16 Jan 2018 22:27:04 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/posts/golang/</guid>
      <description>Summary 初识GoLang 基础 文件操作 Text文件 Json文件 Yaml文件 Toml文件 网络编程 tcp udp rpc 数据库操作 mysql redis mongo 数据结构和算法 顺序查找</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://5imili.github.io/about/</link>
      <pubDate>Tue, 16 Jan 2018 13:53:54 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/about/</guid>
      <description>Info Mi lI（米粒） Beijing, China 🇨🇳 Major in Software Engineering Career xxx Contact Wechat: 东北人@帝都老友记 Email: 王宇@帝都老友记、石佛@帝都老友记、冠宇@帝都老友记 微信公众号——(xxx)</description>
    </item>
    
    <item>
      <title>米粒成长记</title>
      <link>https://5imili.github.io/posts/my-first-post/</link>
      <pubDate>Tue, 16 Jan 2018 11:07:41 +0800</pubDate>
      <author>frank@linux.com (555iMili)</author>
      <guid>https://5imili.github.io/posts/my-first-post/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>